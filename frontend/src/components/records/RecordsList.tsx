import React from 'react';
import {
    Box,
    Card,
    CardContent,
    Typography,
    Chip,
    Button
} from '@mui/material';
import { Pets, MedicalServices, Person } from '@mui/icons-material';

interface Record {
    id: number;
    date: string;
    time: string;
    service: string;
    animal_type: string;
    doctor: string;
    status: string;
}

export const RecordsList: React.FC = () => {
    const mockRecords: Record[] = [
        { id: 1, date: '2024-08-25', time: '10:00', service: '–í–∞–∫—Ü–∏–Ω–∞—Ü–∏—è', animal_type: 'dog', doctor: '–î–æ–∫—Ç–æ—Ä –ò–≤–∞–Ω–æ–≤', status: 'confirmed' },
        { id: 2, date: '2024-08-26', time: '15:30', service: '–û—Å–º–æ—Ç—Ä', animal_type: 'cat', doctor: '–î–æ–∫—Ç–æ—Ä –°–∏–¥–æ—Ä–æ–≤–∞', status: 'pending' }
    ];

    const getStatusColor = (status: string): 'success' | 'warning' | 'error' | 'default' => {
        switch (status) {
            case 'confirmed': return 'success';
            case 'pending': return 'warning';
            case 'cancelled': return 'error';
            default: return 'default';
        }
    };

    const getStatusText = (status: string) => {
        switch (status) {
            case 'confirmed': return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞';
            case 'pending': return '–û–∂–∏–¥–∞–Ω–∏–µ';
            case 'cancelled': return '–û—Ç–º–µ–Ω–µ–Ω–∞';
            default: return status;
        }
    };

    const getAnimalIcon = (type: string) => {
        switch (type) {
            case 'dog': return 'üêï';
            case 'cat': return 'üêà';
            case 'bird': return 'üê¶';
            default: return 'üêæ';
        }
    };

    return (
        <Box>
            <Typography variant="h5" component="h2" gutterBottom>
                –ú–æ–∏ –∑–∞–ø–∏—Å–∏
            </Typography>

            {mockRecords.length === 0 ? (
                <Box textAlign="center" py={4}>
                    <Typography variant="h6" color="text.secondary">
                        –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π
                    </Typography>
                    <Button variant="contained" sx={{ mt: 2 }} onClick={() => console.log('–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å')}>
                        –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
                    </Button>
                </Box>
            ) : (
                <Box display="flex" flexWrap="wrap" gap={3}>
                    {mockRecords.map(record => (
                        <Card key={record.id} sx={{ flex: '1 1 calc(50% - 12px)', minWidth: 250 }}>
                            <CardContent>
                                <Box display="flex" justifyContent="space-between" alignItems="start" mb={2}>
                                    <Typography variant="h6">
                                        {getAnimalIcon(record.animal_type)} {record.service}
                                    </Typography>
                                    <Chip label={getStatusText(record.status)} color={getStatusColor(record.status)} size="small" />
                                </Box>

                                <Box display="flex" alignItems="center" mb={1}>
                                    <MedicalServices sx={{ mr: 1, color: 'text.secondary' }} />
                                    <Typography variant="body2">{record.service}</Typography>
                                </Box>

                                <Box display="flex" alignItems="center" mb={1}>
                                    <Pets sx={{ mr: 1, color: 'text.secondary' }} />
                                    <Typography variant="body2">{record.animal_type === 'dog' ? '–°–æ–±–∞–∫–∞' : record.animal_type === 'cat' ? '–ö–æ—à–∫–∞' : record.animal_type}</Typography>
                                </Box>

                                <Box display="flex" alignItems="center" mb={1}>
                                    <Person sx={{ mr: 1, color: 'text.secondary' }} />
                                    <Typography variant="body2">{record.doctor}</Typography>
                                </Box>

                                <Typography variant="body2" color="primary" fontWeight="bold">
                                    üìÖ {record.date} –≤ {record.time}
                                </Typography>

                                <Box display="flex" gap={1} mt={2}>
                                    <Button size="small" variant="outlined" onClick={() => console.log('–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏:', record.id)}>
                                        –û—Ç–º–µ–Ω–∏—Ç—å
                                    </Button>
                                    <Button size="small" variant="outlined" onClick={() => console.log('–ü–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏:', record.id)}>
                                        –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏
                                    </Button>
                                </Box>
                            </CardContent>
                        </Card>
                    ))}
                </Box>
            )}

            <Typography variant="body2" color="text.secondary" sx={{ mt: 2, textAlign: 'center' }}>
                ‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∏–∑ mock-–∏—Å—Ç–æ—á–Ω–∏–∫–∞. –ë—ç–∫–µ–Ω–¥ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤.
            </Typography>
        </Box>
    );
};
